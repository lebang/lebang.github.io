(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{201:function(t,a,e){t.exports=e.p+"assets/img/swagger2code.969b7348.png"},202:function(t,a,e){t.exports=e.p+"assets/img/api-img.ba8e04a7.png"},203:function(t,a,e){t.exports=e.p+"assets/img/result-img.57b2aff2.png"},212:function(t,a,e){"use strict";e.r(a);var s=e(28),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"利用swagger生成typescript-interface代码"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用swagger生成typescript-interface代码"}},[t._v("#")]),t._v(" 利用Swagger生成TypeScript interface代码")]),t._v(" "),s("h4",{attrs:{id:"简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),s("p",[t._v("  作为一款API文档工具，Swagger已经广泛应用于程序开发中。通过Swagger衍生出的一系列项目和工具，也极大的方便了我们的开发。")]),t._v(" "),s("p",[t._v("  我们知道Swagger详细描述了项目中所有的请求路径、入参、返回数据。对于前端开发者来说，完全可以通过这份文档生成一份实际可用的代码用于项目。如果恰好你也在使用TypeScript：请求方法以及所有请求的入参、返回数据的定义都可以通过这个工具自动生成。")]),t._v(" "),s("p",[s("img",{attrs:{src:e(201),alt:"Swagger转Code"}})]),t._v(" "),s("h4",{attrs:{id:"使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),s("p",[t._v("  一份Swagger文件通过本工具会转成项目请求的通用代码：")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("api.ts            所有请求代码")]),t._v(" "),s("li",[t._v("http.ts           基于axios封装的http请求")]),t._v(" "),s("li",[t._v("api-typings.ts    所有请求入参、返回数据的typings定义，自动生成，不可手动修改")]),t._v(" "),s("li",[t._v("api-type.ts       导入api-typings中的定义，可自定义修改，对外使用")]),t._v(" "),s("li",[t._v("api-paths.ts      所有请求入参、返回数据的json schema定义")])])]),t._v(" "),s("p",[t._v("  我们来详细看一下生成的代码：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  import http from './http';\n  import * as API_TYPE from './api-type';\n\n  class Api {\n    \n    getPetInfo(param: API_TYPE.PetInfoParam): Promise<API_TYPE.PetInfoResponse> {\n      return http.get('/pet/info', param)\n    }\n  \n    getPetOrder(param: API_TYPE.PetOrderParam): Promise<API_TYPE.PetOrderResponse> {\n      return http.get('/pet/order', param)\n    }\n  \n  }\n  export const api = new Api();\n\n")])])]),s("p",[t._v("  由Swagger文档定义好的http请求代码已经自动生成，我们可以根据自己的需要使用：")]),t._v(" "),s("p",[t._v("1.定义了空的入参，编辑器根据typings定义提醒我们缺少id：\n"),s("img",{attrs:{src:e(202),alt:"使用自动生成api的代码"}})]),t._v(" "),s("p",[t._v("2.传入正确的参数，请求结果字段自动提示:\n"),s("img",{attrs:{src:e(203),alt:"请求结果result自动提示"}})]),t._v(" "),s("h4",{attrs:{id:"安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),s("p",[s("code",[t._v("cnpm i -g swaggts")])]),t._v(" "),s("h4",{attrs:{id:"已知待完善功能："}},[s("a",{staticClass:"header-anchor",attrs:{href:"#已知待完善功能："}},[t._v("#")]),t._v(" 已知待完善功能：")]),t._v(" "),s("p",[s("s",[t._v("+ 只支持get、post请求")])]),t._v(" "),s("ul",[s("li",[t._v("复杂请求url未做处理")])])])}),[],!1,null,null,null);a.default=r.exports}}]);